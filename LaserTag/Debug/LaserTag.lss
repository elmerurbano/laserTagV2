
LaserTag.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cb  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ad  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000247  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000136  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <send_low>:
		_delay_us(1);
	}
}

void send_low (void) {
	PORTB &= ~(1 << IR_LED);	//turn off IR_LED
  80:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <send_low+0x4>
  88:	08 95       	ret

0000008a <send_high>:
	_delay_us(IR_DELAY);
}

void send_high (void) {
	PORTB |= (1 << IR_LED);     //turn on IR_LED
  8a:	28 9a       	sbi	0x05, 0	; 5
  8c:	80 e4       	ldi	r24, 0x40	; 64
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <send_high+0x4>
  92:	08 95       	ret

00000094 <burst>:
	_delay_us(IR_DELAY);
}

//send IR bursts for time specified (microseconds)
void burst(int length) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
	while (length > 0) {
  9a:	18 16       	cp	r1, r24
  9c:	19 06       	cpc	r1, r25
  9e:	44 f4       	brge	.+16     	; 0xb0 <burst+0x1c>
		send_high();
  a0:	0e 94 45 00 	call	0x8a	; 0x8a <send_high>
		send_low();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <send_low>
		length -= IR_DELAY * 2;
  a8:	68 97       	sbiw	r28, 0x18	; 24
	_delay_us(IR_DELAY);
}

//send IR bursts for time specified (microseconds)
void burst(int length) {
	while (length > 0) {
  aa:	1c 16       	cp	r1, r28
  ac:	1d 06       	cpc	r1, r29
  ae:	c4 f3       	brlt	.-16     	; 0xa0 <burst+0xc>
		send_high();
		send_low();
		length -= IR_DELAY * 2;
	}
	PORTB &= ~(1 << IR_LED);
  b0:	28 98       	cbi	0x05, 0	; 5
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <sendCode>:

void sendCode() {  //sends 0b00101010 -> 42
	burst(1000);
  b8:	88 ee       	ldi	r24, 0xE8	; 232
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	97 e0       	ldi	r25, 0x07	; 7
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <sendCode+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <sendCode+0x12>
  ca:	00 00       	nop
	_delay_us(500);
	burst(1000);
  cc:	88 ee       	ldi	r24, 0xE8	; 232
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
  d4:	8f ec       	ldi	r24, 0xCF	; 207
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <sendCode+0x20>
  dc:	00 c0       	rjmp	.+0      	; 0xde <sendCode+0x26>
  de:	00 00       	nop
	_delay_us(500);
	burst(1500);
  e0:	8c ed       	ldi	r24, 0xDC	; 220
  e2:	95 e0       	ldi	r25, 0x05	; 5
  e4:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <sendCode+0x34>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <sendCode+0x3a>
  f2:	00 00       	nop
	_delay_us(500);
	burst(1000);
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <sendCode+0x48>
 104:	00 c0       	rjmp	.+0      	; 0x106 <sendCode+0x4e>
 106:	00 00       	nop
	_delay_us(500);
	burst(1500);
 108:	8c ed       	ldi	r24, 0xDC	; 220
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <sendCode+0x5c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <sendCode+0x62>
 11a:	00 00       	nop
	_delay_us(500);
	burst(1000);
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <sendCode+0x70>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <sendCode+0x76>
 12e:	00 00       	nop
	_delay_us(500);
	burst(1500);
 130:	8c ed       	ldi	r24, 0xDC	; 220
 132:	95 e0       	ldi	r25, 0x05	; 5
 134:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
 138:	8f ec       	ldi	r24, 0xCF	; 207
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <sendCode+0x84>
 140:	00 c0       	rjmp	.+0      	; 0x142 <sendCode+0x8a>
 142:	00 00       	nop
	_delay_us(500);
	burst(1000);
 144:	88 ee       	ldi	r24, 0xE8	; 232
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	0e 94 4a 00 	call	0x94	; 0x94 <burst>
 14c:	8f ec       	ldi	r24, 0xCF	; 207
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <sendCode+0x98>
 154:	00 c0       	rjmp	.+0      	; 0x156 <sendCode+0x9e>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <main>:
	_delay_us(500);
}

int main(void) {	
	DDRB = 0x03;
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
 15e:	17 b8       	out	0x07, r1	; 7
	
	PORTB = 0x00;
 160:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x01;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	88 b9       	out	0x08, r24	; 8
	
	while (1) {
		if (PINC & (1 << TRIGGER)) { //while trigger is pushed (looking for digital high)
 166:	30 9b       	sbis	0x06, 0	; 6
 168:	fe cf       	rjmp	.-4      	; 0x166 <main+0xc>
			sendCode();
 16a:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendCode>
			sendCode();
 16e:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendCode>
			sendCode();
 172:	0e 94 5c 00 	call	0xb8	; 0xb8 <sendCode>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	81 ee       	ldi	r24, 0xE1	; 225
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x22>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x2c>
 186:	00 00       	nop
 188:	ee cf       	rjmp	.-36     	; 0x166 <main+0xc>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
